---
  - name: Check if Kerberos is installed
    uri:
      url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/clusters/{{ cluster_name }}/services/KERBEROS?fields=ServiceInfo/state&minimal_response=true
      method: GET
      user: admin
      password: admin
      HEADER_X-Requested-By: ambari
      force_basic_auth: yes
      return_content: yes
      status_code: 200,404
    register: kerberos_service 

  - name: Add Kerberos service to cluster
    uri: 
      url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/clusters/{{ cluster_name }}/services/KERBEROS
      method: POST
      user: admin
      password: admin
      HEADER_X-Requested-By: ambari
      force_basic_auth: yes
      return_content: yes
      body_format: json
      status_code: 201
    when: kerberos_service.content.find("INSTALLED") == -1

  - name: Check if Kerberos is installed
    uri:
      url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/clusters/{{ cluster_name }}/services/KERBEROS/components/KERBEROS_CLIENT?fields=ServiceComponentInfo/state&minimal_response=true
      method: GET
      user: admin
      password: admin
      HEADER_X-Requested-By: ambari
      force_basic_auth: yes
      return_content: yes
      status_code: 200,404
    register: kerberos_client

  - name: Add Kerberos client to service
    uri: 
      url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/clusters/{{ cluster_name }}/services/KERBEROS/components/KERBEROS_CLIENT
      method: POST
      user: admin
      password: admin
      HEADER_X-Requested-By: ambari
      force_basic_auth: yes
      return_content: yes
      body_format: json
      status_code: 201
    when: kerberos_client.content.find("INSTALLED") == -1

#Moving to two steps rather than using module uri as it doesn't want to work
  - name: copy Kerberos-env
    template: src=kerberos_env_ambari_api.json.j2 dest=/tmp/kerberos_env_ambari_api.json 

  - name: upload Kerberos-env
    shell: "curl -s -u admin:admin -i -H 'X-Requested-By: ambari' -X PUT -d @/tmp/kerberos_env_ambari_api.json http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/clusters/{{ cluster_name }}"
    register: output

# - name: upload Kerberos-env
#   uri: 
#     url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/clusters/{{ cluster_name }}
#     method: PUT
#     user: admin
#     password: admin
#     HEADER_X-Requested-By: ambari
#     body: "{{ lookup('file', '../templates/kerberos_env_ambari_api.json.j2') }}"
#     force_basic_auth: yes
#     return_content: yes
#     body_format: json
#     status_code: 200

# - name: debug
#   debug: msg= {{ item }}
#   with_items: 
#     - "{{ lookup('template', '../templates/kerberos_env_ambari_api.json.j2') }}"

  - name: copy krb5.conf
    copy: src=krb5_conf_ambari_api.json dest=/tmp/krb5_conf_ambari_api.json

  - name: upload krb5.conf
    shell: "curl -s -u admin:admin -i -H 'X-Requested-By: ambari' -X PUT -d @/tmp/krb5_conf_ambari_api.json http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/clusters/{{ cluster_name }}"

# - name: Push krb5.conf
#   uri: 
#     url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/clusters/{{ cluster_name }}
#     method: PUT
#     user: admin
#     password: admin
#     HEADER_X-Requested-By: ambari
#     body: "{{ lookup('file', '../files/krb5_conf_ambari_api.json') }}"
#     force_basic_auth: yes
#     return_content: yes
#     body_format: json
#     status_code: 201

  - name: Config Kerberos Client on all hosts
    uri: 
      url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/clusters/{{ cluster_name }}/hosts?Hosts/host_name={{ item }}
      method: POST
      user: admin
      password: admin
      HEADER_X-Requested-By: ambari
      body: '{"host_components" : [{"HostRoles" : {"component_name":"KERBEROS_CLIENT"}}]}'
      force_basic_auth: yes
      return_content: yes
      body_format: json
      status_code: 202,409,201
    with_flattened:
      - "{{ hosts_list }}"
   
  - name: Install Kerberos service
    uri:
      url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/clusters/{{ cluster_name }}/services/KERBEROS
      method: PUT
      user: admin
      password: admin
      HEADER_X-Requested-By: ambari
      body: "{\"ServiceInfo\": {\"state\" : \"INSTALLED\"}}"
      force_basic_auth: yes
      return_content: yes
      body_format: json
      status_code: 200,202

  - name: Wait for Kerberos to install
    uri:
      url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/clusters/{{ cluster_name }}/services/KERBEROS?fields=ServiceInfo/state&minimal_response=true
      method: GET
      user: admin
      password: admin
      HEADER_X-Requested-By: ambari
      force_basic_auth: yes
      return_content: yes
      status_code: 200
    register: kerberos_installed 
    until: kerberos_installed.content.find("INSTALLED") != -1
    retries: 20
    delay: 10

  - name: stop all services
    uri: 
      url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/clusters/{{ cluster_name }}/services
      method: PUT
      user: admin
      password: admin
      HEADER_X-Requested-By: ambari
      body: '{"RequestInfo": {"context" :"Stop all services via REST"}, "Body": {"ServiceInfo": {"state": "INSTALLED"}}}'
      force_basic_auth: yes
      return_content: yes
      body_format: json
      status_code: 202,200

  - name: Copy template file 
    template: src=kerberos-session-ambari-api.json.j2 dest=/tmp/kerberos-session-ambari-api.json

  - name: Enabling kerberos
    shell: "curl -s -u admin:admin -i -H 'X-Requested-By: ambari' -X PUT -d @/tmp/kerberos-session-ambari-api.json http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/clusters/{{ cluster_name }} |  awk -F'\"' '/href/ {print $4}'"

  - name: wait for installation to complete
    shell: /tmp/monitor_installation.sh
    register: complete_installation
    until: complete_installation.stdout.find("INSTALL_DONE") != -1
    retries: 30
    delay: 60

  - debug: var=complete_installation

# - name: check if task is completed
#   uri:
#     url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/clusters/{{ cluster_name }}/services/KERBEROS?fields=ServiceInfo/state&minimal_response=true
#     method: GET
#     user: admin
#     password: admin
#     HEADER_X-Requested-By: ambari
#     force_basic_auth: yes
#     return_content: yes
#     status_code: 200
#   register: kerberos_installed 
#   until: kerberos_installed.content.find("INSTALLED") != -1
#   retries: 20
#   delay: 10    

# - name: Enabling kerberos
#   uri: 
#     url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/clusters/{{ cluster_name }}
#     method: PUT
#     user: admin
#     password: admin
#     HEADER_X-Requested-By: ambari
#     body: "{{ lookup('template', '../templates/kerberos-session-ambari-api.json.j2') }}"
#     force_basic_auth: yes
#     return_content: yes
#     body_format: json
#     status_code: 202,200

  - name: start all services
    uri: 
      url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/clusters/{{ cluster_name }}/services/
      method: PUT
      user: admin
      password: admin
      HEADER_X-Requested-By: ambari
      body: '{"RequestInfo": {"context" :"Start all services via REST"}, "Body": {"ServiceInfo": {"state": "STARTED"}}}'
      force_basic_auth: yes
      return_content: yes
      body_format: json
      status_code: 202,200

  - name: wait for installation to complete
    shell: /tmp/monitor_installation.sh
    register: complete_installation
    until: complete_installation.stdout.find("INSTALL_DONE") != -1
    retries: 30
    delay: 60

  - debug: var=complete_installation